// Generated by CoffeeScript 1.3.3
(function() {
  var randomWalk;

  randomWalk = function(numSteps) {
    var lastValue, _i, _results;
    lastValue = 1;
    return (function() {
      _results = [];
      for (var _i = 0; 0 <= numSteps ? _i < numSteps : _i > numSteps; 0 <= numSteps ? _i++ : _i--){ _results.push(_i); }
      return _results;
    }).apply(this).map(function() {
      return lastValue = lastValue + d3.random.normal()();
    });
  };

  App.LazyDataSource = Ember.ArrayProxy.extend({
    objectAt: function(idx) {
      var date, row;
      row = this.get('content')[idx];
      if (row) {
        return row;
      }
      date = new Date();
      date.setDate(date.getDate() + idx);
      row = {
        index: idx,
        date: date,
        open: Math.random() * 100 - 50,
        high: Math.random() * 100 - 50,
        low: Math.random() * 100 - 50,
        close: Math.random() * 100 - 50,
        volume: Math.random() * 1000000
      };
      this.get('content')[idx] = row;
      return row;
    }
  });

  App.BarCell = Ember.Table.TableCell.extend({
    templateName: 'bar-cell',
    classNameBindings: ['column.color'],
    barWidth: Ember.computed(function() {
      var column, row, _ref;
      _ref = this.getProperties('column', 'row'), column = _ref.column, row = _ref.row;
      if (!(column && row)) {
        return 0;
      }
      return Math.round(+column.getCellContent(row.get('content')));
    }).property('column', 'row'),
    histogramStyle: Ember.computed(function() {
      return "width: " + (this.get('barWidth')) + "%;";
    }).property('barWidth')
  });

  App.SparkCellView = Ember.Table.TableCell.extend({
    templateName: '',
    heightBinding: 'controller.rowHeight',
    didInsertElement: function() {
      return this.renderD3View();
    },
    onWidthDidChange: Ember.observer(function() {
      this.$('svg').remove();
      return this.renderD3View();
    }, 'width'),
    renderD3View: function() {
      var data, fill, g, h, len, line, max, min, p, svg, w, xscale, yscale;
      data = this.get('row.content.timeseries');
      h = this.get('height');
      w = this.get('width');
      p = 2;
      min = _.min(data);
      max = _.max(data);
      len = data.length;
      fill = d3.scale.category10();
      xscale = d3.scale.linear().domain([0, len]).range([p, w - p]);
      yscale = d3.scale.linear().domain([min, max]).range([h - p, p]);
      line = d3.svg.line().x(function(d, i) {
        return xscale(i);
      }).y(function(d) {
        return yscale(d);
      });
      svg = d3.select("#" + (this.get('elementId'))).append('svg:svg').attr('height', h).attr('width', w);
      g = svg.append('svg:g');
      return g.append('svg:path').attr('d', line(data)).attr('stroke', function(d) {
        return fill(Math.round(Math.random()) * 10);
      }).attr('fill', 'none');
    }
  });

  App.HorizonCellView = Ember.Table.TableCell.extend({
    templateName: '',
    heightBinding: 'controller.rowHeight',
    didInsertElement: function() {
      return this.renderD3View();
    },
    onWidthDidChange: Ember.observer(function() {
      this.$('svg').remove();
      return this.renderD3View();
    }, 'width'),
    renderD3View: function() {
      var chart, data, height, svg, width;
      data = this.get('row.content.data');
      width = this.get('width');
      height = this.get('height');
      chart = d3.horizon().width(width).height(height).bands(2).mode("mirror").interpolate("basis");
      svg = d3.select("#" + (this.get('elementId'))).append("svg").attr("width", width).attr("height", height);
      return svg.data([data]).call(chart);
    }
  });

  App.BarsTableExample = Ember.Namespace.create();

  App.BarsTableExample.TableController = Ember.Table.TableController.extend({
    colors: ['blue', 'teal', 'green', 'yellow', 'orange'],
    hasHeader: true,
    hasFooter: true,
    numFixedColumns: 1,
    numRows: 1000,
    rowHeight: 30,
    headerHeight: 40,
    footerHeight: 0,
    columns: Ember.computed(function() {
      var colors, column1, columns;
      colors = this.get('colors');
      column1 = Ember.Table.ColumnDefinition.create({
        columnWidth: 100,
        headerCellName: 'Name',
        getCellContent: function(row) {
          return row['key'];
        }
      });
      columns = [0, 1, 2, 3, 4].map(function(number) {
        return Ember.Table.ColumnDefinition.create({
          color: colors[number],
          headerCellName: 'Bar',
          tableCellViewClass: 'App.BarCell',
          getCellContent: function(row) {
            return row["value" + number];
          }
        });
      });
      columns.unshift(column1);
      return columns;
    }).property('colors'),
    content: Ember.computed(function() {
      var _i, _ref, _results;
      return (function() {
        _results = [];
        for (var _i = 0, _ref = this.get('numRows'); 0 <= _ref ? _i < _ref : _i > _ref; 0 <= _ref ? _i++ : _i--){ _results.push(_i); }
        return _results;
      }).apply(this).map(function(num, index) {
        return {
          key: index,
          value0: Math.random() * 80 + 10,
          value1: Math.random() * 80 + 10,
          value2: Math.random() * 80 + 10,
          value3: Math.random() * 80 + 10,
          value4: Math.random() * 80 + 10
        };
      });
    }).property('numRows')
  });

  App.SparklineTableExample = Ember.Namespace.create();

  App.SparklineTableExample.TableController = Ember.Table.TableController.extend({
    hasHeader: true,
    hasFooter: true,
    numFixedColumns: 1,
    numRows: 1000,
    rowHeight: 30,
    headerHeight: 40,
    footerHeight: 0,
    columns: Ember.computed(function() {
      var close, high, low, name, open, spark;
      name = Ember.Table.ColumnDefinition.create({
        columnWidth: 100,
        headerCellName: 'Name',
        getCellContent: function(row) {
          return 'Asset ' + row['name'];
        }
      });
      open = Ember.Table.ColumnDefinition.create({
        columnWidth: 75,
        headerCellName: 'Open',
        getCellContent: function(row) {
          return row['open'].toFixed(2);
        }
      });
      spark = Ember.Table.ColumnDefinition.create({
        columnWidth: 200,
        headerCellName: 'Sparkline',
        tableCellViewClass: 'App.SparkCellView',
        getCellContent: Ember.K
      });
      close = Ember.Table.ColumnDefinition.create({
        columnWidth: 75,
        headerCellName: 'Close',
        getCellContent: function(row) {
          return row['close'].toFixed(2);
        }
      });
      low = Ember.Table.ColumnDefinition.create({
        columnWidth: 75,
        headerCellName: 'Low',
        getCellContent: function(row) {
          return row['low'].toFixed(2);
        }
      });
      high = Ember.Table.ColumnDefinition.create({
        columnWidth: 75,
        headerCellName: 'High',
        getCellContent: function(row) {
          return row['high'].toFixed(2);
        }
      });
      return [name, open, spark, close, low, high];
    }).property(),
    content: Ember.computed(function() {
      var _i, _ref, _results;
      return (function() {
        _results = [];
        for (var _i = 0, _ref = this.get('numRows'); 0 <= _ref ? _i < _ref : _i > _ref; 0 <= _ref ? _i++ : _i--){ _results.push(_i); }
        return _results;
      }).apply(this).map(function(num, index) {
        var data;
        data = randomWalk(100);
        return {
          name: index,
          timeseries: data,
          open: data[0],
          close: data[99],
          low: _.min(data),
          high: _.max(data)
        };
      });
    }).property('numRows')
  });

  App.HorizonTableExample = Ember.Namespace.create();

  App.HorizonTableExample.TableController = Ember.Table.TableController.extend({
    hasHeader: true,
    hasFooter: true,
    numFixedColumns: 0,
    numRows: 1000,
    rowHeight: 35,
    headerHeight: 40,
    footerHeight: 0,
    columns: Ember.computed(function() {
      var horizon, name;
      name = Ember.Table.ColumnDefinition.create({
        columnWidth: 100,
        headerCellName: 'Name',
        getCellContent: function(row) {
          return 'Horizon ' + row['name'];
        }
      });
      horizon = Ember.Table.ColumnDefinition.create({
        columnWidth: 400,
        headerCellName: 'Horizon',
        tableCellViewClass: 'App.HorizonCellView',
        getCellContent: Ember.K
      });
      return [name, horizon];
    }).property(),
    content: Ember.computed(function() {
      var normal, _i, _ref, _results;
      normal = d3.random.normal(1.5, 3);
      return (function() {
        _results = [];
        for (var _i = 0, _ref = this.get('numRows'); 0 <= _ref ? _i < _ref : _i > _ref; 0 <= _ref ? _i++ : _i--){ _results.push(_i); }
        return _results;
      }).apply(this).map(function(num, index) {
        var data, _i, _results;
        data = (function() {
          _results = [];
          for (_i = 0; _i < 100; _i++){ _results.push(_i); }
          return _results;
        }).apply(this).map(function(i) {
          return [i, normal()];
        });
        return {
          name: index,
          data: data
        };
      });
    }).property('numRows')
  });

  App.SimpleTableExample = Ember.Namespace.create();

  App.SimpleTableExample.TableController = Ember.Table.TableController.extend({
    hasHeader: true,
    hasFooter: true,
    numFixedColumns: 0,
    numRows: 1000000,
    rowHeight: 30,
    headerHeight: 40,
    footerHeight: 0,
    columns: Ember.computed(function() {
      var columnNames, columns, dateColumn, entryColumn;
      columnNames = ['open', 'high', 'low', 'close', 'volume'];
      entryColumn = Ember.Table.ColumnDefinition.create({
        columnWidth: 100,
        headerCellName: 'Entry',
        getCellContent: function(row) {
          return row['index'];
        }
      });
      dateColumn = Ember.Table.ColumnDefinition.create({
        columnWidth: 150,
        headerCellName: 'Date',
        getCellContent: function(row) {
          return row['date'].toDateString();
        }
      });
      columns = columnNames.map(function(key, index) {
        var name;
        name = key.charAt(0).toUpperCase() + key.slice(1);
        return Ember.Table.ColumnDefinition.create({
          columnWidth: 100,
          headerCellName: name,
          getCellContent: function(row) {
            return row[key].toFixed(2);
          }
        });
      });
      columns.unshift(dateColumn);
      columns.unshift(entryColumn);
      return columns;
    }).property(),
    content: Ember.computed(function() {
      return App.LazyDataSource.create({
        content: new Array(this.get('numRows'))
      });
    }).property('numRows')
  });

  App.ApplicationView = Ember.View.extend({
    classNames: 'ember-app',
    templateName: 'application'
  });

  App.ApplicationController = Ember.Controller.extend({
    barsTableExampleController: Ember.computed(function() {
      return App.BarsTableExample.TableController.create();
    }).property(),
    sparklineTableExampleController: Ember.computed(function() {
      return App.SparklineTableExample.TableController.create();
    }).property(),
    horizonTableExampleController: Ember.computed(function() {
      return App.HorizonTableExample.TableController.create();
    }).property(),
    simpleTableExampleController: Ember.computed(function() {
      return App.SimpleTableExample.TableController.create();
    }).property(),
    treeTableExampleController: Ember.computed(function() {
      var controller;
      controller = App.TreeTableExample.TreeTableController.create();
      controller.set('data', window.sampledata);
      return controller;
    }).property()
  });

  App.Router = Ember.Router.extend({
    root: Ember.Route.extend({
      index: Ember.Route.extend({
        route: '/'
      })
    })
  });

  App.initialize();

}).call(this);
